// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: Messages.proto

package dolphindevice

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// begin: Messages - defs ---------------------
type MessageType int32

const (
	MessageType_Timeout                 MessageType = 0 // Reserved for embedded system
	MessageType_DataPack_Request        MessageType = 1
	MessageType_DataPack_Response       MessageType = 2
	MessageType_Authentication_Request  MessageType = 7
	MessageType_Authentication_Response MessageType = 8
	MessageType_OnlinePosition_Request  MessageType = 9
	// Config messages
	MessageType_Config_Set_Request                MessageType = 10 // Set configuration - from server
	MessageType_Config_Set_Response               MessageType = 11 // Setting configuration ok - from device
	MessageType_Config_Get_Request                MessageType = 12 // Get configuration from device - from server
	MessageType_Config_Get_Response               MessageType = 13 // Packet has config data - from device
	MessageType_Config_Diff_Request               MessageType = 14 // Configuration diff message - from server
	MessageType_Config_Diff_Response              MessageType = 15 // Configuration diff response - from device
	MessageType_Config_SSLSetCertificate_Request  MessageType = 16
	MessageType_Config_SSLSetCertificate_Response MessageType = 17
	MessageType_Config_SSLGetStatus_Request       MessageType = 18
	MessageType_Config_SSLGetStatus_Response      MessageType = 19
	// Firmware update
	MessageType_Firmware_Info_Request          MessageType = 20 // from device
	MessageType_Firmware_Info_Response         MessageType = 21 // from server
	MessageType_Firmware_Update_Start_Request  MessageType = 22 // Starting firmware update - from server
	MessageType_Firmware_Update_Start_Response MessageType = 23 // Starting firmware update is ok - from device
	MessageType_Firmware_GetPack_Request       MessageType = 24 // Packet get message - from device
	MessageType_Firmware_GetPack_Response      MessageType = 25 // Pachet get response - from server
	MessageType_Firmware_Update_State          MessageType = 26 // Update state - from device
	// Connection messages
	MessageType_Ping                MessageType = 30
	MessageType_Pong                MessageType = 31
	MessageType_Log_Start           MessageType = 32
	MessageType_Log_End             MessageType = 33
	MessageType_Log_Pack            MessageType = 34
	MessageType_DeviceInfo_Request  MessageType = 35
	MessageType_DeviceInfo_Response MessageType = 36
	// Sensors
	MessageType_Temperature_Request  MessageType = 40
	MessageType_Temperature_Response MessageType = 41
	MessageType_TiltStatus_Request   MessageType = 42
	MessageType_TiltStatus_Data      MessageType = 43
	// Commands
	MessageType_Command_Request  MessageType = 60
	MessageType_Command_Response MessageType = 61
	// USSD Data
	MessageType_USSDData_Request MessageType = 68
	// Expansion Board
	MessageType_ExpBoard_Data_Request        MessageType = 70
	MessageType_ExpBoard_Data_Response       MessageType = 71
	MessageType_ExpBoard_SetDigital_Request  MessageType = 72
	MessageType_ExpBoard_SetDigital_Response MessageType = 73
	// FMS Data
	MessageType_FMS_DataLog_Start MessageType = 80
	MessageType_FMS_DataLog_End   MessageType = 81
	MessageType_FMS_DataLog_Data  MessageType = 82
	// Crash Data
	MessageType_Crash_Data_Request  MessageType = 90
	MessageType_Crash_Data_Response MessageType = 91
	// SIPAAD
	MessageType_SIPAAD_SSL_GetStatus_Request  MessageType = 100
	MessageType_SIPAAD_SSL_GetStatus_Response MessageType = 101
	// DiagnosticsTroubleCodes
	MessageType_DiagnosticsTroubleCodes_SaveCodes_Request  MessageType = 110
	MessageType_DiagnosticsTroubleCodes_SaveCodes_Response MessageType = 111
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:   "Timeout",
		1:   "DataPack_Request",
		2:   "DataPack_Response",
		7:   "Authentication_Request",
		8:   "Authentication_Response",
		9:   "OnlinePosition_Request",
		10:  "Config_Set_Request",
		11:  "Config_Set_Response",
		12:  "Config_Get_Request",
		13:  "Config_Get_Response",
		14:  "Config_Diff_Request",
		15:  "Config_Diff_Response",
		16:  "Config_SSLSetCertificate_Request",
		17:  "Config_SSLSetCertificate_Response",
		18:  "Config_SSLGetStatus_Request",
		19:  "Config_SSLGetStatus_Response",
		20:  "Firmware_Info_Request",
		21:  "Firmware_Info_Response",
		22:  "Firmware_Update_Start_Request",
		23:  "Firmware_Update_Start_Response",
		24:  "Firmware_GetPack_Request",
		25:  "Firmware_GetPack_Response",
		26:  "Firmware_Update_State",
		30:  "Ping",
		31:  "Pong",
		32:  "Log_Start",
		33:  "Log_End",
		34:  "Log_Pack",
		35:  "DeviceInfo_Request",
		36:  "DeviceInfo_Response",
		40:  "Temperature_Request",
		41:  "Temperature_Response",
		42:  "TiltStatus_Request",
		43:  "TiltStatus_Data",
		60:  "Command_Request",
		61:  "Command_Response",
		68:  "USSDData_Request",
		70:  "ExpBoard_Data_Request",
		71:  "ExpBoard_Data_Response",
		72:  "ExpBoard_SetDigital_Request",
		73:  "ExpBoard_SetDigital_Response",
		80:  "FMS_DataLog_Start",
		81:  "FMS_DataLog_End",
		82:  "FMS_DataLog_Data",
		90:  "Crash_Data_Request",
		91:  "Crash_Data_Response",
		100: "SIPAAD_SSL_GetStatus_Request",
		101: "SIPAAD_SSL_GetStatus_Response",
		110: "DiagnosticsTroubleCodes_SaveCodes_Request",
		111: "DiagnosticsTroubleCodes_SaveCodes_Response",
	}
	MessageType_value = map[string]int32{
		"Timeout":                                    0,
		"DataPack_Request":                           1,
		"DataPack_Response":                          2,
		"Authentication_Request":                     7,
		"Authentication_Response":                    8,
		"OnlinePosition_Request":                     9,
		"Config_Set_Request":                         10,
		"Config_Set_Response":                        11,
		"Config_Get_Request":                         12,
		"Config_Get_Response":                        13,
		"Config_Diff_Request":                        14,
		"Config_Diff_Response":                       15,
		"Config_SSLSetCertificate_Request":           16,
		"Config_SSLSetCertificate_Response":          17,
		"Config_SSLGetStatus_Request":                18,
		"Config_SSLGetStatus_Response":               19,
		"Firmware_Info_Request":                      20,
		"Firmware_Info_Response":                     21,
		"Firmware_Update_Start_Request":              22,
		"Firmware_Update_Start_Response":             23,
		"Firmware_GetPack_Request":                   24,
		"Firmware_GetPack_Response":                  25,
		"Firmware_Update_State":                      26,
		"Ping":                                       30,
		"Pong":                                       31,
		"Log_Start":                                  32,
		"Log_End":                                    33,
		"Log_Pack":                                   34,
		"DeviceInfo_Request":                         35,
		"DeviceInfo_Response":                        36,
		"Temperature_Request":                        40,
		"Temperature_Response":                       41,
		"TiltStatus_Request":                         42,
		"TiltStatus_Data":                            43,
		"Command_Request":                            60,
		"Command_Response":                           61,
		"USSDData_Request":                           68,
		"ExpBoard_Data_Request":                      70,
		"ExpBoard_Data_Response":                     71,
		"ExpBoard_SetDigital_Request":                72,
		"ExpBoard_SetDigital_Response":               73,
		"FMS_DataLog_Start":                          80,
		"FMS_DataLog_End":                            81,
		"FMS_DataLog_Data":                           82,
		"Crash_Data_Request":                         90,
		"Crash_Data_Response":                        91,
		"SIPAAD_SSL_GetStatus_Request":               100,
		"SIPAAD_SSL_GetStatus_Response":              101,
		"DiagnosticsTroubleCodes_SaveCodes_Request":  110,
		"DiagnosticsTroubleCodes_SaveCodes_Response": 111,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{0}
}

type MessageFlags int32

const (
	MessageFlags_Flag_None       MessageFlags = 0
	MessageFlags_Flag_Compressed MessageFlags = 1
)

// Enum value maps for MessageFlags.
var (
	MessageFlags_name = map[int32]string{
		0: "Flag_None",
		1: "Flag_Compressed",
	}
	MessageFlags_value = map[string]int32{
		"Flag_None":       0,
		"Flag_Compressed": 1,
	}
)

func (x MessageFlags) Enum() *MessageFlags {
	p := new(MessageFlags)
	*p = x
	return p
}

func (x MessageFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[1].Descriptor()
}

func (MessageFlags) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[1]
}

func (x MessageFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFlags.Descriptor instead.
func (MessageFlags) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{1}
}

type DataPackResponseCode int32

const (
	DataPackResponseCode_DataPack_Timeout      DataPackResponseCode = 0
	DataPackResponseCode_DataPack_OK           DataPackResponseCode = 1
	DataPackResponseCode_DataPack_UnknownError DataPackResponseCode = 2
	DataPackResponseCode_DataPack_Decode_Error DataPackResponseCode = 3
)

// Enum value maps for DataPackResponseCode.
var (
	DataPackResponseCode_name = map[int32]string{
		0: "DataPack_Timeout",
		1: "DataPack_OK",
		2: "DataPack_UnknownError",
		3: "DataPack_Decode_Error",
	}
	DataPackResponseCode_value = map[string]int32{
		"DataPack_Timeout":      0,
		"DataPack_OK":           1,
		"DataPack_UnknownError": 2,
		"DataPack_Decode_Error": 3,
	}
)

func (x DataPackResponseCode) Enum() *DataPackResponseCode {
	p := new(DataPackResponseCode)
	*p = x
	return p
}

func (x DataPackResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataPackResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[2].Descriptor()
}

func (DataPackResponseCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[2]
}

func (x DataPackResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataPackResponseCode.Descriptor instead.
func (DataPackResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{2}
}

type GNSSStatus int32

const (
	GNSSStatus_GNSS_Off      GNSSStatus = 0
	GNSSStatus_GNSS_NotFixed GNSSStatus = 1
	GNSSStatus_GNSS_Fixed    GNSSStatus = 2
	GNSSStatus_GNSS_Sleep    GNSSStatus = 3
)

// Enum value maps for GNSSStatus.
var (
	GNSSStatus_name = map[int32]string{
		0: "GNSS_Off",
		1: "GNSS_NotFixed",
		2: "GNSS_Fixed",
		3: "GNSS_Sleep",
	}
	GNSSStatus_value = map[string]int32{
		"GNSS_Off":      0,
		"GNSS_NotFixed": 1,
		"GNSS_Fixed":    2,
		"GNSS_Sleep":    3,
	}
)

func (x GNSSStatus) Enum() *GNSSStatus {
	p := new(GNSSStatus)
	*p = x
	return p
}

func (x GNSSStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GNSSStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[3].Descriptor()
}

func (GNSSStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[3]
}

func (x GNSSStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GNSSStatus.Descriptor instead.
func (GNSSStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{3}
}

type GNSS_JammingStatus int32

const (
	GNSS_JammingStatus_GNSS_UnknownJammingStatus GNSS_JammingStatus = 0
	GNSS_JammingStatus_GNSS_NoJamming            GNSS_JammingStatus = 1
	GNSS_JammingStatus_GNSS_JammingWarning       GNSS_JammingStatus = 2
	GNSS_JammingStatus_GNSS_JammingCritical      GNSS_JammingStatus = 3
)

// Enum value maps for GNSS_JammingStatus.
var (
	GNSS_JammingStatus_name = map[int32]string{
		0: "GNSS_UnknownJammingStatus",
		1: "GNSS_NoJamming",
		2: "GNSS_JammingWarning",
		3: "GNSS_JammingCritical",
	}
	GNSS_JammingStatus_value = map[string]int32{
		"GNSS_UnknownJammingStatus": 0,
		"GNSS_NoJamming":            1,
		"GNSS_JammingWarning":       2,
		"GNSS_JammingCritical":      3,
	}
)

func (x GNSS_JammingStatus) Enum() *GNSS_JammingStatus {
	p := new(GNSS_JammingStatus)
	*p = x
	return p
}

func (x GNSS_JammingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GNSS_JammingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[4].Descriptor()
}

func (GNSS_JammingStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[4]
}

func (x GNSS_JammingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GNSS_JammingStatus.Descriptor instead.
func (GNSS_JammingStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{4}
}

type ModemStatus int32

const (
	ModemStatus_ModemStatus_Off           ModemStatus = 0
	ModemStatus_ModemStatus_NotRegistered ModemStatus = 1
	ModemStatus_ModemStatus_Searching     ModemStatus = 2
	ModemStatus_ModemStatus_Registered    ModemStatus = 3
	ModemStatus_ModemStatus_Roaming       ModemStatus = 4
)

// Enum value maps for ModemStatus.
var (
	ModemStatus_name = map[int32]string{
		0: "ModemStatus_Off",
		1: "ModemStatus_NotRegistered",
		2: "ModemStatus_Searching",
		3: "ModemStatus_Registered",
		4: "ModemStatus_Roaming",
	}
	ModemStatus_value = map[string]int32{
		"ModemStatus_Off":           0,
		"ModemStatus_NotRegistered": 1,
		"ModemStatus_Searching":     2,
		"ModemStatus_Registered":    3,
		"ModemStatus_Roaming":       4,
	}
)

func (x ModemStatus) Enum() *ModemStatus {
	p := new(ModemStatus)
	*p = x
	return p
}

func (x ModemStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModemStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[5].Descriptor()
}

func (ModemStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[5]
}

func (x ModemStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModemStatus.Descriptor instead.
func (ModemStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{5}
}

type SIMStatus int32

const (
	SIMStatus_SIM_NotInserted SIMStatus = 0
	SIMStatus_SIM_Ready       SIMStatus = 1
	SIMStatus_SIM_PIN_REQ     SIMStatus = 2
	SIMStatus_SIM_PUK_REQ     SIMStatus = 3
	SIMStatus_SIM_PH_PIN_REQ  SIMStatus = 4
	SIMStatus_SIM_PH_PUK_REQ  SIMStatus = 5
	SIMStatus_SIM_PIN2_REQ    SIMStatus = 6
	SIMStatus_SIM_PUK2_REQ    SIMStatus = 7
	SIMStatus_SIM_Busy        SIMStatus = 8
	SIMStatus_SIM_NotReady    SIMStatus = 9
	SIMStatus_SIM_Unspecified SIMStatus = 10
)

// Enum value maps for SIMStatus.
var (
	SIMStatus_name = map[int32]string{
		0:  "SIM_NotInserted",
		1:  "SIM_Ready",
		2:  "SIM_PIN_REQ",
		3:  "SIM_PUK_REQ",
		4:  "SIM_PH_PIN_REQ",
		5:  "SIM_PH_PUK_REQ",
		6:  "SIM_PIN2_REQ",
		7:  "SIM_PUK2_REQ",
		8:  "SIM_Busy",
		9:  "SIM_NotReady",
		10: "SIM_Unspecified",
	}
	SIMStatus_value = map[string]int32{
		"SIM_NotInserted": 0,
		"SIM_Ready":       1,
		"SIM_PIN_REQ":     2,
		"SIM_PUK_REQ":     3,
		"SIM_PH_PIN_REQ":  4,
		"SIM_PH_PUK_REQ":  5,
		"SIM_PIN2_REQ":    6,
		"SIM_PUK2_REQ":    7,
		"SIM_Busy":        8,
		"SIM_NotReady":    9,
		"SIM_Unspecified": 10,
	}
)

func (x SIMStatus) Enum() *SIMStatus {
	p := new(SIMStatus)
	*p = x
	return p
}

func (x SIMStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SIMStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[6].Descriptor()
}

func (SIMStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[6]
}

func (x SIMStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SIMStatus.Descriptor instead.
func (SIMStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{6}
}

type BluetoothStatus int32

const (
	BluetoothStatus_BL_Off       BluetoothStatus = 0
	BluetoothStatus_BL_OnHidden  BluetoothStatus = 1
	BluetoothStatus_BL_OnVisible BluetoothStatus = 2
)

// Enum value maps for BluetoothStatus.
var (
	BluetoothStatus_name = map[int32]string{
		0: "BL_Off",
		1: "BL_OnHidden",
		2: "BL_OnVisible",
	}
	BluetoothStatus_value = map[string]int32{
		"BL_Off":       0,
		"BL_OnHidden":  1,
		"BL_OnVisible": 2,
	}
)

func (x BluetoothStatus) Enum() *BluetoothStatus {
	p := new(BluetoothStatus)
	*p = x
	return p
}

func (x BluetoothStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[7].Descriptor()
}

func (BluetoothStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[7]
}

func (x BluetoothStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothStatus.Descriptor instead.
func (BluetoothStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{7}
}

type BluetoothExtDeviceStatus int32

const (
	BluetoothExtDeviceStatus_BLExt_None        BluetoothExtDeviceStatus = 0
	BluetoothExtDeviceStatus_BLExt_Scanning    BluetoothExtDeviceStatus = 1
	BluetoothExtDeviceStatus_BLExt_Pairing     BluetoothExtDeviceStatus = 2
	BluetoothExtDeviceStatus_BLExt_WaitForPair BluetoothExtDeviceStatus = 3
	BluetoothExtDeviceStatus_BLExt_Connecting  BluetoothExtDeviceStatus = 4
	BluetoothExtDeviceStatus_BLExt_Connected   BluetoothExtDeviceStatus = 5
)

// Enum value maps for BluetoothExtDeviceStatus.
var (
	BluetoothExtDeviceStatus_name = map[int32]string{
		0: "BLExt_None",
		1: "BLExt_Scanning",
		2: "BLExt_Pairing",
		3: "BLExt_WaitForPair",
		4: "BLExt_Connecting",
		5: "BLExt_Connected",
	}
	BluetoothExtDeviceStatus_value = map[string]int32{
		"BLExt_None":        0,
		"BLExt_Scanning":    1,
		"BLExt_Pairing":     2,
		"BLExt_WaitForPair": 3,
		"BLExt_Connecting":  4,
		"BLExt_Connected":   5,
	}
)

func (x BluetoothExtDeviceStatus) Enum() *BluetoothExtDeviceStatus {
	p := new(BluetoothExtDeviceStatus)
	*p = x
	return p
}

func (x BluetoothExtDeviceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BluetoothExtDeviceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[8].Descriptor()
}

func (BluetoothExtDeviceStatus) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[8]
}

func (x BluetoothExtDeviceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BluetoothExtDeviceStatus.Descriptor instead.
func (BluetoothExtDeviceStatus) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{8}
}

// Config ------------------------
type ConfigResponseCode int32

const (
	ConfigResponseCode_OK             ConfigResponseCode = 0
	ConfigResponseCode_Unknown_Error  ConfigResponseCode = 1 // Config error - from device
	ConfigResponseCode_Protocol_Error ConfigResponseCode = 2 // Config message protocol error - from device
	ConfigResponseCode_Store_Error    ConfigResponseCode = 3 // Config store error - from device
	ConfigResponseCode_Wrong_Password ConfigResponseCode = 4 // Configuration password is wrong
)

// Enum value maps for ConfigResponseCode.
var (
	ConfigResponseCode_name = map[int32]string{
		0: "OK",
		1: "Unknown_Error",
		2: "Protocol_Error",
		3: "Store_Error",
		4: "Wrong_Password",
	}
	ConfigResponseCode_value = map[string]int32{
		"OK":             0,
		"Unknown_Error":  1,
		"Protocol_Error": 2,
		"Store_Error":    3,
		"Wrong_Password": 4,
	}
)

func (x ConfigResponseCode) Enum() *ConfigResponseCode {
	p := new(ConfigResponseCode)
	*p = x
	return p
}

func (x ConfigResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[9].Descriptor()
}

func (ConfigResponseCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[9]
}

func (x ConfigResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigResponseCode.Descriptor instead.
func (ConfigResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{9}
}

type FURespCode int32

const (
	FURespCode_FU_NONE                       FURespCode = 0 // Reserved for embedded system
	FURespCode_FU_UPDATE_START_OK            FURespCode = 1
	FURespCode_FU_UPDATE_START_ERROR         FURespCode = 2
	FURespCode_FU_UPDATE_START_ERROR_SIZE    FURespCode = 3
	FURespCode_FU_GETPACK_OK                 FURespCode = 4
	FURespCode_FU_GETPACK_ERROR              FURespCode = 5
	FURespCode_FU_UPDATE_STATE_INSTALLING    FURespCode = 6
	FURespCode_FU_UPDATE_STATE_FINISHED      FURespCode = 7
	FURespCode_FU_UPDATE_STATE_ERROR         FURespCode = 8
	FURespCode_FU_UPDATE_STATE_ERROR_INVALID FURespCode = 9
	FURespCode_FU_UPDATE_STATE_ERROR_CRC     FURespCode = 10
)

// Enum value maps for FURespCode.
var (
	FURespCode_name = map[int32]string{
		0:  "FU_NONE",
		1:  "FU_UPDATE_START_OK",
		2:  "FU_UPDATE_START_ERROR",
		3:  "FU_UPDATE_START_ERROR_SIZE",
		4:  "FU_GETPACK_OK",
		5:  "FU_GETPACK_ERROR",
		6:  "FU_UPDATE_STATE_INSTALLING",
		7:  "FU_UPDATE_STATE_FINISHED",
		8:  "FU_UPDATE_STATE_ERROR",
		9:  "FU_UPDATE_STATE_ERROR_INVALID",
		10: "FU_UPDATE_STATE_ERROR_CRC",
	}
	FURespCode_value = map[string]int32{
		"FU_NONE":                       0,
		"FU_UPDATE_START_OK":            1,
		"FU_UPDATE_START_ERROR":         2,
		"FU_UPDATE_START_ERROR_SIZE":    3,
		"FU_GETPACK_OK":                 4,
		"FU_GETPACK_ERROR":              5,
		"FU_UPDATE_STATE_INSTALLING":    6,
		"FU_UPDATE_STATE_FINISHED":      7,
		"FU_UPDATE_STATE_ERROR":         8,
		"FU_UPDATE_STATE_ERROR_INVALID": 9,
		"FU_UPDATE_STATE_ERROR_CRC":     10,
	}
)

func (x FURespCode) Enum() *FURespCode {
	p := new(FURespCode)
	*p = x
	return p
}

func (x FURespCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FURespCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[10].Descriptor()
}

func (FURespCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[10]
}

func (x FURespCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FURespCode.Descriptor instead.
func (FURespCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{10}
}

// Log messages -----------------
type LogLevel int32

const (
	LogLevel_LOG_LEVEL_NONE  LogLevel = 0
	LogLevel_LOG_LEVEL_FATAL LogLevel = 1
	LogLevel_LOG_LEVEL_ERROR LogLevel = 2
	LogLevel_LOG_LEVEL_WARN  LogLevel = 4
	LogLevel_LOG_LEVEL_INFO  LogLevel = 8
	LogLevel_LOG_LEVEL_DEBUG LogLevel = 16
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0:  "LOG_LEVEL_NONE",
		1:  "LOG_LEVEL_FATAL",
		2:  "LOG_LEVEL_ERROR",
		4:  "LOG_LEVEL_WARN",
		8:  "LOG_LEVEL_INFO",
		16: "LOG_LEVEL_DEBUG",
	}
	LogLevel_value = map[string]int32{
		"LOG_LEVEL_NONE":  0,
		"LOG_LEVEL_FATAL": 1,
		"LOG_LEVEL_ERROR": 2,
		"LOG_LEVEL_WARN":  4,
		"LOG_LEVEL_INFO":  8,
		"LOG_LEVEL_DEBUG": 16,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[11].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[11]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{11}
}

// System ----------------------------------
type SystemResetType int32

const (
	SystemResetType_SystemReset_PowerOn        SystemResetType = 0
	SystemResetType_SystemReset_Sleep          SystemResetType = 1
	SystemResetType_SystemReset_HardFault      SystemResetType = 2
	SystemResetType_SystemReset_WatchDog       SystemResetType = 3
	SystemResetType_SystemReset_FirmwareUpdate SystemResetType = 4
	SystemResetType_SystemReset_User           SystemResetType = 5
)

// Enum value maps for SystemResetType.
var (
	SystemResetType_name = map[int32]string{
		0: "SystemReset_PowerOn",
		1: "SystemReset_Sleep",
		2: "SystemReset_HardFault",
		3: "SystemReset_WatchDog",
		4: "SystemReset_FirmwareUpdate",
		5: "SystemReset_User",
	}
	SystemResetType_value = map[string]int32{
		"SystemReset_PowerOn":        0,
		"SystemReset_Sleep":          1,
		"SystemReset_HardFault":      2,
		"SystemReset_WatchDog":       3,
		"SystemReset_FirmwareUpdate": 4,
		"SystemReset_User":           5,
	}
)

func (x SystemResetType) Enum() *SystemResetType {
	p := new(SystemResetType)
	*p = x
	return p
}

func (x SystemResetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemResetType) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[12].Descriptor()
}

func (SystemResetType) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[12]
}

func (x SystemResetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemResetType.Descriptor instead.
func (SystemResetType) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{12}
}

type AuthenticateResponseCode int32

const (
	AuthenticateResponseCode_Authenticate_Invalid AuthenticateResponseCode = 0
	AuthenticateResponseCode_Authenticate_Valid   AuthenticateResponseCode = 1
)

// Enum value maps for AuthenticateResponseCode.
var (
	AuthenticateResponseCode_name = map[int32]string{
		0: "Authenticate_Invalid",
		1: "Authenticate_Valid",
	}
	AuthenticateResponseCode_value = map[string]int32{
		"Authenticate_Invalid": 0,
		"Authenticate_Valid":   1,
	}
)

func (x AuthenticateResponseCode) Enum() *AuthenticateResponseCode {
	p := new(AuthenticateResponseCode)
	*p = x
	return p
}

func (x AuthenticateResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuthenticateResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[13].Descriptor()
}

func (AuthenticateResponseCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[13]
}

func (x AuthenticateResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuthenticateResponseCode.Descriptor instead.
func (AuthenticateResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{13}
}

type CrashDataResponseCode int32

const (
	CrashDataResponseCode_CrashData_Error CrashDataResponseCode = 0
	CrashDataResponseCode_CrashData_OK    CrashDataResponseCode = 1
)

// Enum value maps for CrashDataResponseCode.
var (
	CrashDataResponseCode_name = map[int32]string{
		0: "CrashData_Error",
		1: "CrashData_OK",
	}
	CrashDataResponseCode_value = map[string]int32{
		"CrashData_Error": 0,
		"CrashData_OK":    1,
	}
)

func (x CrashDataResponseCode) Enum() *CrashDataResponseCode {
	p := new(CrashDataResponseCode)
	*p = x
	return p
}

func (x CrashDataResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrashDataResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[14].Descriptor()
}

func (CrashDataResponseCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[14]
}

func (x CrashDataResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrashDataResponseCode.Descriptor instead.
func (CrashDataResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{14}
}

// Diagnostics Trouble Codes ----------
type DTCResposneCode int32

const (
	DTCResposneCode_DTC_RESPOSNE_NONE  DTCResposneCode = 0
	DTCResposneCode_DTC_RESPOSNE_ERROR DTCResposneCode = 1
	DTCResposneCode_DTC_RESPOSNE_OK    DTCResposneCode = 2
)

// Enum value maps for DTCResposneCode.
var (
	DTCResposneCode_name = map[int32]string{
		0: "DTC_RESPOSNE_NONE",
		1: "DTC_RESPOSNE_ERROR",
		2: "DTC_RESPOSNE_OK",
	}
	DTCResposneCode_value = map[string]int32{
		"DTC_RESPOSNE_NONE":  0,
		"DTC_RESPOSNE_ERROR": 1,
		"DTC_RESPOSNE_OK":    2,
	}
)

func (x DTCResposneCode) Enum() *DTCResposneCode {
	p := new(DTCResposneCode)
	*p = x
	return p
}

func (x DTCResposneCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTCResposneCode) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[15].Descriptor()
}

func (DTCResposneCode) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[15]
}

func (x DTCResposneCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTCResposneCode.Descriptor instead.
func (DTCResposneCode) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{15}
}

type DTCType int32

const (
	DTCType_OBD_STORED_DTC    DTCType = 0
	DTCType_OBD_PENDING_DTC   DTCType = 1
	DTCType_OBD_PERMANENT_DTC DTCType = 2
	DTCType_FMS_DTC           DTCType = 3
	DTCType_SCANIA_DTC        DTCType = 4
)

// Enum value maps for DTCType.
var (
	DTCType_name = map[int32]string{
		0: "OBD_STORED_DTC",
		1: "OBD_PENDING_DTC",
		2: "OBD_PERMANENT_DTC",
		3: "FMS_DTC",
		4: "SCANIA_DTC",
	}
	DTCType_value = map[string]int32{
		"OBD_STORED_DTC":    0,
		"OBD_PENDING_DTC":   1,
		"OBD_PERMANENT_DTC": 2,
		"FMS_DTC":           3,
		"SCANIA_DTC":        4,
	}
)

func (x DTCType) Enum() *DTCType {
	p := new(DTCType)
	*p = x
	return p
}

func (x DTCType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTCType) Descriptor() protoreflect.EnumDescriptor {
	return file_Messages_proto_enumTypes[16].Descriptor()
}

func (DTCType) Type() protoreflect.EnumType {
	return &file_Messages_proto_enumTypes[16]
}

func (x DTCType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTCType.Descriptor instead.
func (DTCType) EnumDescriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{16}
}

// begin: Point - Statistics defs ---------------------
type IOData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    AlarmType `protobuf:"varint,1,opt,name=ID,proto3,enum=Config.AlarmType" json:"ID,omitempty"`
	Value uint64    `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *IOData) Reset() {
	*x = IOData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IOData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IOData) ProtoMessage() {}

func (x *IOData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IOData.ProtoReflect.Descriptor instead.
func (*IOData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{0}
}

func (x *IOData) GetID() AlarmType {
	if x != nil {
		return x.ID
	}
	return AlarmType_Alarm_None
}

func (x *IOData) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude   float32   `protobuf:"fixed32,1,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude  float32   `protobuf:"fixed32,2,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	Altitude   float32   `protobuf:"fixed32,3,opt,name=Altitude,proto3" json:"Altitude,omitempty"`
	Satellites uint32    `protobuf:"varint,4,opt,name=Satellites,proto3" json:"Satellites,omitempty"`
	Speed      float32   `protobuf:"fixed32,5,opt,name=Speed,proto3" json:"Speed,omitempty"`
	Bearing    float32   `protobuf:"fixed32,6,opt,name=Bearing,proto3" json:"Bearing,omitempty"`
	HDOP       uint32    `protobuf:"varint,7,opt,name=HDOP,proto3" json:"HDOP,omitempty"`
	Timestamp  uint32    `protobuf:"fixed32,8,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Alarm      AlarmType `protobuf:"varint,9,opt,name=Alarm,proto3,enum=Config.AlarmType" json:"Alarm,omitempty"`
	// Netw protocol IO
	IOList_ID    []AlarmType `protobuf:"varint,11,rep,packed,name=IOList_ID,json=IOListID,proto3,enum=Config.AlarmType" json:"IOList_ID,omitempty"`
	IOList_Value []uint64    `protobuf:"varint,12,rep,packed,name=IOList_Value,json=IOListValue,proto3" json:"IOList_Value,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{1}
}

func (x *DataPoint) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *DataPoint) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *DataPoint) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *DataPoint) GetSatellites() uint32 {
	if x != nil {
		return x.Satellites
	}
	return 0
}

func (x *DataPoint) GetSpeed() float32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *DataPoint) GetBearing() float32 {
	if x != nil {
		return x.Bearing
	}
	return 0
}

func (x *DataPoint) GetHDOP() uint32 {
	if x != nil {
		return x.HDOP
	}
	return 0
}

func (x *DataPoint) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPoint) GetAlarm() AlarmType {
	if x != nil {
		return x.Alarm
	}
	return AlarmType_Alarm_None
}

func (x *DataPoint) GetIOList_ID() []AlarmType {
	if x != nil {
		return x.IOList_ID
	}
	return nil
}

func (x *DataPoint) GetIOList_Value() []uint64 {
	if x != nil {
		return x.IOList_Value
	}
	return nil
}

type DataPackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*DataPoint `protobuf:"bytes,1,rep,name=Points,proto3" json:"Points,omitempty"`
}

func (x *DataPackRequest) Reset() {
	*x = DataPackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPackRequest) ProtoMessage() {}

func (x *DataPackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPackRequest.ProtoReflect.Descriptor instead.
func (*DataPackRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{2}
}

func (x *DataPackRequest) GetPoints() []*DataPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

type DataPackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response DataPackResponseCode `protobuf:"varint,1,opt,name=Response,proto3,enum=Messages.DataPackResponseCode" json:"Response,omitempty"`
}

func (x *DataPackResponse) Reset() {
	*x = DataPackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPackResponse) ProtoMessage() {}

func (x *DataPackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPackResponse.ProtoReflect.Descriptor instead.
func (*DataPackResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{3}
}

func (x *DataPackResponse) GetResponse() DataPackResponseCode {
	if x != nil {
		return x.Response
	}
	return DataPackResponseCode_DataPack_Timeout
}

// Serial port --------------------
type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	IMEI            uint64 `protobuf:"fixed64,2,opt,name=IMEI,proto3" json:"IMEI,omitempty"`
	FirmwareVersion string `protobuf:"bytes,3,opt,name=FirmwareVersion,proto3" json:"FirmwareVersion,omitempty"`
	// System info
	RTCTimestamp       uint32 `protobuf:"fixed32,10,opt,name=RTCTimestamp,proto3" json:"RTCTimestamp,omitempty"`
	LastStartTimestamp uint32 `protobuf:"fixed32,11,opt,name=LastStartTimestamp,proto3" json:"LastStartTimestamp,omitempty"`
	UpTime             uint32 `protobuf:"varint,12,opt,name=UpTime,proto3" json:"UpTime,omitempty"`
	TotalUpTime        uint32 `protobuf:"varint,13,opt,name=TotalUpTime,proto3" json:"TotalUpTime,omitempty"`
	// GNSS
	GNSS_Status         GNSSStatus         `protobuf:"varint,20,opt,name=GNSS_Status,json=GNSSStatus,proto3,enum=Messages.GNSSStatus" json:"GNSS_Status,omitempty"`
	GNSS_Fix            bool               `protobuf:"varint,21,opt,name=GNSS_Fix,json=GNSSFix,proto3" json:"GNSS_Fix,omitempty"`
	GNSS_TimeToFirstFix uint32             `protobuf:"varint,22,opt,name=GNSS_TimeToFirstFix,json=GNSSTimeToFirstFix,proto3" json:"GNSS_TimeToFirstFix,omitempty"`
	GNSS_TimeToLastFix  uint32             `protobuf:"varint,23,opt,name=GNSS_TimeToLastFix,json=GNSSTimeToLastFix,proto3" json:"GNSS_TimeToLastFix,omitempty"`
	GNSS_Packets        uint32             `protobuf:"varint,25,opt,name=GNSS_Packets,json=GNSSPackets,proto3" json:"GNSS_Packets,omitempty"`
	GNSS_Latitude       float32            `protobuf:"fixed32,26,opt,name=GNSS_Latitude,json=GNSSLatitude,proto3" json:"GNSS_Latitude,omitempty"`
	GNSS_Longitude      float32            `protobuf:"fixed32,27,opt,name=GNSS_Longitude,json=GNSSLongitude,proto3" json:"GNSS_Longitude,omitempty"`
	GNSS_Altitude       uint32             `protobuf:"varint,28,opt,name=GNSS_Altitude,json=GNSSAltitude,proto3" json:"GNSS_Altitude,omitempty"`
	GNSS_Speed          uint32             `protobuf:"varint,29,opt,name=GNSS_Speed,json=GNSSSpeed,proto3" json:"GNSS_Speed,omitempty"`
	GNSS_Bearing        uint32             `protobuf:"varint,30,opt,name=GNSS_Bearing,json=GNSSBearing,proto3" json:"GNSS_Bearing,omitempty"`
	GNSS_HDOP           uint32             `protobuf:"varint,31,opt,name=GNSS_HDOP,json=GNSSHDOP,proto3" json:"GNSS_HDOP,omitempty"`
	GNSS_PDOP           uint32             `protobuf:"varint,32,opt,name=GNSS_PDOP,json=GNSSPDOP,proto3" json:"GNSS_PDOP,omitempty"`
	GNSS_SatsInUse      uint32             `protobuf:"varint,33,opt,name=GNSS_SatsInUse,json=GNSSSatsInUse,proto3" json:"GNSS_SatsInUse,omitempty"`
	GNSS_GPSSats        uint32             `protobuf:"varint,34,opt,name=GNSS_GPSSats,json=GNSSGPSSats,proto3" json:"GNSS_GPSSats,omitempty"`
	GNSS_GLONASSSats    uint32             `protobuf:"varint,35,opt,name=GNSS_GLONASSSats,json=GNSSGLONASSSats,proto3" json:"GNSS_GLONASSSats,omitempty"`
	GNSS_GalileoSats    uint32             `protobuf:"varint,36,opt,name=GNSS_GalileoSats,json=GNSSGalileoSats,proto3" json:"GNSS_GalileoSats,omitempty"`
	GNSS_BeidouSats     uint32             `protobuf:"varint,37,opt,name=GNSS_BeidouSats,json=GNSSBeidouSats,proto3" json:"GNSS_BeidouSats,omitempty"`
	GNSS_JammingStatus  GNSS_JammingStatus `protobuf:"varint,38,opt,name=GNSS_JammingStatus,json=GNSSJammingStatus,proto3,enum=Messages.GNSS_JammingStatus" json:"GNSS_JammingStatus,omitempty"`
	// GSM
	GSM_ModemStatus                    ModemStatus `protobuf:"varint,50,opt,name=GSM_ModemStatus,json=GSMModemStatus,proto3,enum=Messages.ModemStatus" json:"GSM_ModemStatus,omitempty"`
	GSM_SIMStatus                      SIMStatus   `protobuf:"varint,52,opt,name=GSM_SIMStatus,json=GSMSIMStatus,proto3,enum=Messages.SIMStatus" json:"GSM_SIMStatus,omitempty"`
	GSM_GPRSStatus                     bool        `protobuf:"varint,53,opt,name=GSM_GPRSStatus,json=GSMGPRSStatus,proto3" json:"GSM_GPRSStatus,omitempty"`
	GSM_OperatorName                   string      `protobuf:"bytes,54,opt,name=GSM_OperatorName,json=GSMOperatorName,proto3" json:"GSM_OperatorName,omitempty"`
	GSM_OperatorCode                   uint32      `protobuf:"varint,55,opt,name=GSM_OperatorCode,json=GSMOperatorCode,proto3" json:"GSM_OperatorCode,omitempty"`
	GSM_LocationAreaCode               uint32      `protobuf:"varint,56,opt,name=GSM_LocationAreaCode,json=GSMLocationAreaCode,proto3" json:"GSM_LocationAreaCode,omitempty"`
	GSM_CellID                         uint32      `protobuf:"varint,57,opt,name=GSM_CellID,json=GSMCellID,proto3" json:"GSM_CellID,omitempty"`
	GSM_SignalStrength                 uint32      `protobuf:"varint,58,opt,name=GSM_SignalStrength,json=GSMSignalStrength,proto3" json:"GSM_SignalStrength,omitempty"`
	GSM_Jamming                        bool        `protobuf:"varint,59,opt,name=GSM_Jamming,json=GSMJamming,proto3" json:"GSM_Jamming,omitempty"`
	GSM_Records_SentCount              uint32      `protobuf:"varint,60,opt,name=GSM_Records_SentCount,json=GSMRecordsSentCount,proto3" json:"GSM_Records_SentCount,omitempty"`
	GSM_Records_LastSentTime           uint32      `protobuf:"varint,61,opt,name=GSM_Records_LastSentTime,json=GSMRecordsLastSentTime,proto3" json:"GSM_Records_LastSentTime,omitempty"`
	GSM_Records_LastServerResponseTime uint32      `protobuf:"varint,62,opt,name=GSM_Records_LastServerResponseTime,json=GSMRecordsLastServerResponseTime,proto3" json:"GSM_Records_LastServerResponseTime,omitempty"`
	GSM_Records_Count                  uint32      `protobuf:"varint,63,opt,name=GSM_Records_Count,json=GSMRecordsCount,proto3" json:"GSM_Records_Count,omitempty"`
	GSM_GPRS_SentData                  uint32      `protobuf:"varint,65,opt,name=GSM_GPRS_SentData,json=GSMGPRSSentData,proto3" json:"GSM_GPRS_SentData,omitempty"`
	GSM_GPRS_ReceivedData              uint32      `protobuf:"varint,66,opt,name=GSM_GPRS_ReceivedData,json=GSMGPRSReceivedData,proto3" json:"GSM_GPRS_ReceivedData,omitempty"`
	GSM_SMS_Sent                       uint32      `protobuf:"varint,69,opt,name=GSM_SMS_Sent,json=GSMSMSSent,proto3" json:"GSM_SMS_Sent,omitempty"`
	GSM_SMS_Received                   uint32      `protobuf:"varint,70,opt,name=GSM_SMS_Received,json=GSMSMSReceived,proto3" json:"GSM_SMS_Received,omitempty"`
	GSM_Socket_State                   bool        `protobuf:"varint,75,opt,name=GSM_Socket_State,json=GSMSocketState,proto3" json:"GSM_Socket_State,omitempty"`
	// Bluetooth
	Bluetooth_Status                 BluetoothStatus          `protobuf:"varint,80,opt,name=Bluetooth_Status,json=BluetoothStatus,proto3,enum=Messages.BluetoothStatus" json:"Bluetooth_Status,omitempty"`
	Bluetooth_Name                   string                   `protobuf:"bytes,81,opt,name=Bluetooth_Name,json=BluetoothName,proto3" json:"Bluetooth_Name,omitempty"`
	Bluetooth_MAC                    string                   `protobuf:"bytes,82,opt,name=Bluetooth_MAC,json=BluetoothMAC,proto3" json:"Bluetooth_MAC,omitempty"`
	Bluetooth_DataLink_ConnectStatus bool                     `protobuf:"varint,83,opt,name=Bluetooth_DataLink_ConnectStatus,json=BluetoothDataLinkConnectStatus,proto3" json:"Bluetooth_DataLink_ConnectStatus,omitempty"`
	Bluetooth_DataLink_Name          string                   `protobuf:"bytes,84,opt,name=Bluetooth_DataLink_Name,json=BluetoothDataLinkName,proto3" json:"Bluetooth_DataLink_Name,omitempty"`
	Bluetooth_DataLink_MAC           string                   `protobuf:"bytes,85,opt,name=Bluetooth_DataLink_MAC,json=BluetoothDataLinkMAC,proto3" json:"Bluetooth_DataLink_MAC,omitempty"`
	Bluetooth_ExtDevice_Status       BluetoothExtDeviceStatus `protobuf:"varint,86,opt,name=Bluetooth_ExtDevice_Status,json=BluetoothExtDeviceStatus,proto3,enum=Messages.BluetoothExtDeviceStatus" json:"Bluetooth_ExtDevice_Status,omitempty"`
	Bluetooth_ExtDevice_Name         string                   `protobuf:"bytes,87,opt,name=Bluetooth_ExtDevice_Name,json=BluetoothExtDeviceName,proto3" json:"Bluetooth_ExtDevice_Name,omitempty"`
	Bluetooth_ExtDevice_MAC          string                   `protobuf:"bytes,88,opt,name=Bluetooth_ExtDevice_MAC,json=BluetoothExtDeviceMAC,proto3" json:"Bluetooth_ExtDevice_MAC,omitempty"`
	// IO
	IOList_ID    []AlarmType `protobuf:"varint,100,rep,packed,name=IOList_ID,json=IOListID,proto3,enum=Config.AlarmType" json:"IOList_ID,omitempty"`
	IOList_Value []uint64    `protobuf:"varint,101,rep,packed,name=IOList_Value,json=IOListValue,proto3" json:"IOList_Value,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeviceInfo) GetIMEI() uint64 {
	if x != nil {
		return x.IMEI
	}
	return 0
}

func (x *DeviceInfo) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *DeviceInfo) GetRTCTimestamp() uint32 {
	if x != nil {
		return x.RTCTimestamp
	}
	return 0
}

func (x *DeviceInfo) GetLastStartTimestamp() uint32 {
	if x != nil {
		return x.LastStartTimestamp
	}
	return 0
}

func (x *DeviceInfo) GetUpTime() uint32 {
	if x != nil {
		return x.UpTime
	}
	return 0
}

func (x *DeviceInfo) GetTotalUpTime() uint32 {
	if x != nil {
		return x.TotalUpTime
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Status() GNSSStatus {
	if x != nil {
		return x.GNSS_Status
	}
	return GNSSStatus_GNSS_Off
}

func (x *DeviceInfo) GetGNSS_Fix() bool {
	if x != nil {
		return x.GNSS_Fix
	}
	return false
}

func (x *DeviceInfo) GetGNSS_TimeToFirstFix() uint32 {
	if x != nil {
		return x.GNSS_TimeToFirstFix
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_TimeToLastFix() uint32 {
	if x != nil {
		return x.GNSS_TimeToLastFix
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Packets() uint32 {
	if x != nil {
		return x.GNSS_Packets
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Latitude() float32 {
	if x != nil {
		return x.GNSS_Latitude
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Longitude() float32 {
	if x != nil {
		return x.GNSS_Longitude
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Altitude() uint32 {
	if x != nil {
		return x.GNSS_Altitude
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Speed() uint32 {
	if x != nil {
		return x.GNSS_Speed
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_Bearing() uint32 {
	if x != nil {
		return x.GNSS_Bearing
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_HDOP() uint32 {
	if x != nil {
		return x.GNSS_HDOP
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_PDOP() uint32 {
	if x != nil {
		return x.GNSS_PDOP
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_SatsInUse() uint32 {
	if x != nil {
		return x.GNSS_SatsInUse
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_GPSSats() uint32 {
	if x != nil {
		return x.GNSS_GPSSats
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_GLONASSSats() uint32 {
	if x != nil {
		return x.GNSS_GLONASSSats
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_GalileoSats() uint32 {
	if x != nil {
		return x.GNSS_GalileoSats
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_BeidouSats() uint32 {
	if x != nil {
		return x.GNSS_BeidouSats
	}
	return 0
}

func (x *DeviceInfo) GetGNSS_JammingStatus() GNSS_JammingStatus {
	if x != nil {
		return x.GNSS_JammingStatus
	}
	return GNSS_JammingStatus_GNSS_UnknownJammingStatus
}

func (x *DeviceInfo) GetGSM_ModemStatus() ModemStatus {
	if x != nil {
		return x.GSM_ModemStatus
	}
	return ModemStatus_ModemStatus_Off
}

func (x *DeviceInfo) GetGSM_SIMStatus() SIMStatus {
	if x != nil {
		return x.GSM_SIMStatus
	}
	return SIMStatus_SIM_NotInserted
}

func (x *DeviceInfo) GetGSM_GPRSStatus() bool {
	if x != nil {
		return x.GSM_GPRSStatus
	}
	return false
}

func (x *DeviceInfo) GetGSM_OperatorName() string {
	if x != nil {
		return x.GSM_OperatorName
	}
	return ""
}

func (x *DeviceInfo) GetGSM_OperatorCode() uint32 {
	if x != nil {
		return x.GSM_OperatorCode
	}
	return 0
}

func (x *DeviceInfo) GetGSM_LocationAreaCode() uint32 {
	if x != nil {
		return x.GSM_LocationAreaCode
	}
	return 0
}

func (x *DeviceInfo) GetGSM_CellID() uint32 {
	if x != nil {
		return x.GSM_CellID
	}
	return 0
}

func (x *DeviceInfo) GetGSM_SignalStrength() uint32 {
	if x != nil {
		return x.GSM_SignalStrength
	}
	return 0
}

func (x *DeviceInfo) GetGSM_Jamming() bool {
	if x != nil {
		return x.GSM_Jamming
	}
	return false
}

func (x *DeviceInfo) GetGSM_Records_SentCount() uint32 {
	if x != nil {
		return x.GSM_Records_SentCount
	}
	return 0
}

func (x *DeviceInfo) GetGSM_Records_LastSentTime() uint32 {
	if x != nil {
		return x.GSM_Records_LastSentTime
	}
	return 0
}

func (x *DeviceInfo) GetGSM_Records_LastServerResponseTime() uint32 {
	if x != nil {
		return x.GSM_Records_LastServerResponseTime
	}
	return 0
}

func (x *DeviceInfo) GetGSM_Records_Count() uint32 {
	if x != nil {
		return x.GSM_Records_Count
	}
	return 0
}

func (x *DeviceInfo) GetGSM_GPRS_SentData() uint32 {
	if x != nil {
		return x.GSM_GPRS_SentData
	}
	return 0
}

func (x *DeviceInfo) GetGSM_GPRS_ReceivedData() uint32 {
	if x != nil {
		return x.GSM_GPRS_ReceivedData
	}
	return 0
}

func (x *DeviceInfo) GetGSM_SMS_Sent() uint32 {
	if x != nil {
		return x.GSM_SMS_Sent
	}
	return 0
}

func (x *DeviceInfo) GetGSM_SMS_Received() uint32 {
	if x != nil {
		return x.GSM_SMS_Received
	}
	return 0
}

func (x *DeviceInfo) GetGSM_Socket_State() bool {
	if x != nil {
		return x.GSM_Socket_State
	}
	return false
}

func (x *DeviceInfo) GetBluetooth_Status() BluetoothStatus {
	if x != nil {
		return x.Bluetooth_Status
	}
	return BluetoothStatus_BL_Off
}

func (x *DeviceInfo) GetBluetooth_Name() string {
	if x != nil {
		return x.Bluetooth_Name
	}
	return ""
}

func (x *DeviceInfo) GetBluetooth_MAC() string {
	if x != nil {
		return x.Bluetooth_MAC
	}
	return ""
}

func (x *DeviceInfo) GetBluetooth_DataLink_ConnectStatus() bool {
	if x != nil {
		return x.Bluetooth_DataLink_ConnectStatus
	}
	return false
}

func (x *DeviceInfo) GetBluetooth_DataLink_Name() string {
	if x != nil {
		return x.Bluetooth_DataLink_Name
	}
	return ""
}

func (x *DeviceInfo) GetBluetooth_DataLink_MAC() string {
	if x != nil {
		return x.Bluetooth_DataLink_MAC
	}
	return ""
}

func (x *DeviceInfo) GetBluetooth_ExtDevice_Status() BluetoothExtDeviceStatus {
	if x != nil {
		return x.Bluetooth_ExtDevice_Status
	}
	return BluetoothExtDeviceStatus_BLExt_None
}

func (x *DeviceInfo) GetBluetooth_ExtDevice_Name() string {
	if x != nil {
		return x.Bluetooth_ExtDevice_Name
	}
	return ""
}

func (x *DeviceInfo) GetBluetooth_ExtDevice_MAC() string {
	if x != nil {
		return x.Bluetooth_ExtDevice_MAC
	}
	return ""
}

func (x *DeviceInfo) GetIOList_ID() []AlarmType {
	if x != nil {
		return x.IOList_ID
	}
	return nil
}

func (x *DeviceInfo) GetIOList_Value() []uint64 {
	if x != nil {
		return x.IOList_Value
	}
	return nil
}

type ConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password      string  `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
	Configuration *Config `protobuf:"bytes,2,opt,name=Configuration,proto3" json:"Configuration,omitempty"`
}

func (x *ConfigSetRequest) Reset() {
	*x = ConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetRequest) ProtoMessage() {}

func (x *ConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetRequest.ProtoReflect.Descriptor instead.
func (*ConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigSetRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConfigSetRequest) GetConfiguration() *Config {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type ConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response ConfigResponseCode `protobuf:"varint,1,opt,name=Response,proto3,enum=Messages.ConfigResponseCode" json:"Response,omitempty"`
}

func (x *ConfigSetResponse) Reset() {
	*x = ConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigSetResponse) ProtoMessage() {}

func (x *ConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigSetResponse.ProtoReflect.Descriptor instead.
func (*ConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigSetResponse) GetResponse() ConfigResponseCode {
	if x != nil {
		return x.Response
	}
	return ConfigResponseCode_OK
}

type ConfigGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
}

func (x *ConfigGetRequest) Reset() {
	*x = ConfigGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetRequest) ProtoMessage() {}

func (x *ConfigGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetRequest.ProtoReflect.Descriptor instead.
func (*ConfigGetRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigGetRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ConfigGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response ConfigResponseCode `protobuf:"varint,1,opt,name=Response,proto3,enum=Messages.ConfigResponseCode" json:"Response,omitempty"`
	Data     *Config            `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *ConfigGetResponse) Reset() {
	*x = ConfigGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGetResponse) ProtoMessage() {}

func (x *ConfigGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGetResponse.ProtoReflect.Descriptor instead.
func (*ConfigGetResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigGetResponse) GetResponse() ConfigResponseCode {
	if x != nil {
		return x.Response
	}
	return ConfigResponseCode_OK
}

func (x *ConfigGetResponse) GetData() *Config {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfigDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password   string      `protobuf:"bytes,1,opt,name=Password,proto3" json:"Password,omitempty"`
	ConfigDiff *ConfigDiff `protobuf:"bytes,2,opt,name=ConfigDiff,proto3" json:"ConfigDiff,omitempty"`
}

func (x *ConfigDiffRequest) Reset() {
	*x = ConfigDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiffRequest) ProtoMessage() {}

func (x *ConfigDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiffRequest.ProtoReflect.Descriptor instead.
func (*ConfigDiffRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigDiffRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ConfigDiffRequest) GetConfigDiff() *ConfigDiff {
	if x != nil {
		return x.ConfigDiff
	}
	return nil
}

// Firmware update ---------------------
type FirmwareUpdateInfo_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel                 string `protobuf:"bytes,1,opt,name=Channel,proto3" json:"Channel,omitempty"`
	HardwareVersion         uint32 `protobuf:"varint,2,opt,name=HardwareVersion,proto3" json:"HardwareVersion,omitempty"`
	Device_Version_Name     string `protobuf:"bytes,10,opt,name=Device_Version_Name,json=DeviceVersionName,proto3" json:"Device_Version_Name,omitempty"`
	Device_Version_Major    uint32 `protobuf:"varint,11,opt,name=Device_Version_Major,json=DeviceVersionMajor,proto3" json:"Device_Version_Major,omitempty"`
	Device_Version_Minor    uint32 `protobuf:"varint,12,opt,name=Device_Version_Minor,json=DeviceVersionMinor,proto3" json:"Device_Version_Minor,omitempty"`
	Device_Version_Revision uint32 `protobuf:"varint,13,opt,name=Device_Version_Revision,json=DeviceVersionRevision,proto3" json:"Device_Version_Revision,omitempty"`
}

func (x *FirmwareUpdateInfo_Request) Reset() {
	*x = FirmwareUpdateInfo_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareUpdateInfo_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareUpdateInfo_Request) ProtoMessage() {}

func (x *FirmwareUpdateInfo_Request) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareUpdateInfo_Request.ProtoReflect.Descriptor instead.
func (*FirmwareUpdateInfo_Request) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{10}
}

func (x *FirmwareUpdateInfo_Request) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *FirmwareUpdateInfo_Request) GetHardwareVersion() uint32 {
	if x != nil {
		return x.HardwareVersion
	}
	return 0
}

func (x *FirmwareUpdateInfo_Request) GetDevice_Version_Name() string {
	if x != nil {
		return x.Device_Version_Name
	}
	return ""
}

func (x *FirmwareUpdateInfo_Request) GetDevice_Version_Major() uint32 {
	if x != nil {
		return x.Device_Version_Major
	}
	return 0
}

func (x *FirmwareUpdateInfo_Request) GetDevice_Version_Minor() uint32 {
	if x != nil {
		return x.Device_Version_Minor
	}
	return 0
}

func (x *FirmwareUpdateInfo_Request) GetDevice_Version_Revision() uint32 {
	if x != nil {
		return x.Device_Version_Revision
	}
	return 0
}

type FirmwareUpdateInfo_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version_Name     string `protobuf:"bytes,1,opt,name=Version_Name,json=VersionName,proto3" json:"Version_Name,omitempty"`
	Version_Major    uint32 `protobuf:"varint,2,opt,name=Version_Major,json=VersionMajor,proto3" json:"Version_Major,omitempty"`
	Version_Minor    uint32 `protobuf:"varint,3,opt,name=Version_Minor,json=VersionMinor,proto3" json:"Version_Minor,omitempty"`
	Version_Revision uint32 `protobuf:"varint,4,opt,name=Version_Revision,json=VersionRevision,proto3" json:"Version_Revision,omitempty"`
	// Firmware ID
	FirmwareID uint32 `protobuf:"varint,5,opt,name=FirmwareID,proto3" json:"FirmwareID,omitempty"`
	// Firmware file total size in bytes
	TotalSize uint32 `protobuf:"varint,6,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
}

func (x *FirmwareUpdateInfo_Response) Reset() {
	*x = FirmwareUpdateInfo_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareUpdateInfo_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareUpdateInfo_Response) ProtoMessage() {}

func (x *FirmwareUpdateInfo_Response) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareUpdateInfo_Response.ProtoReflect.Descriptor instead.
func (*FirmwareUpdateInfo_Response) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{11}
}

func (x *FirmwareUpdateInfo_Response) GetVersion_Name() string {
	if x != nil {
		return x.Version_Name
	}
	return ""
}

func (x *FirmwareUpdateInfo_Response) GetVersion_Major() uint32 {
	if x != nil {
		return x.Version_Major
	}
	return 0
}

func (x *FirmwareUpdateInfo_Response) GetVersion_Minor() uint32 {
	if x != nil {
		return x.Version_Minor
	}
	return 0
}

func (x *FirmwareUpdateInfo_Response) GetVersion_Revision() uint32 {
	if x != nil {
		return x.Version_Revision
	}
	return 0
}

func (x *FirmwareUpdateInfo_Response) GetFirmwareID() uint32 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareUpdateInfo_Response) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type FirmwareUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID                uint32     `protobuf:"varint,1,opt,name=FirmwareID,proto3" json:"FirmwareID,omitempty"`
	Response                  FURespCode `protobuf:"varint,2,opt,name=Response,proto3,enum=Messages.FURespCode" json:"Response,omitempty"`
	Firmware_Version_Name     string     `protobuf:"bytes,3,opt,name=Firmware_Version_Name,json=FirmwareVersionName,proto3" json:"Firmware_Version_Name,omitempty"`
	Firmware_Version_Major    uint32     `protobuf:"varint,4,opt,name=Firmware_Version_Major,json=FirmwareVersionMajor,proto3" json:"Firmware_Version_Major,omitempty"`
	Firmware_Version_Minor    uint32     `protobuf:"varint,5,opt,name=Firmware_Version_Minor,json=FirmwareVersionMinor,proto3" json:"Firmware_Version_Minor,omitempty"`
	Firmware_Version_Revision uint32     `protobuf:"varint,6,opt,name=Firmware_Version_Revision,json=FirmwareVersionRevision,proto3" json:"Firmware_Version_Revision,omitempty"`
}

func (x *FirmwareUpdateResp) Reset() {
	*x = FirmwareUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareUpdateResp) ProtoMessage() {}

func (x *FirmwareUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareUpdateResp.ProtoReflect.Descriptor instead.
func (*FirmwareUpdateResp) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{12}
}

func (x *FirmwareUpdateResp) GetFirmwareID() uint32 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareUpdateResp) GetResponse() FURespCode {
	if x != nil {
		return x.Response
	}
	return FURespCode_FU_NONE
}

func (x *FirmwareUpdateResp) GetFirmware_Version_Name() string {
	if x != nil {
		return x.Firmware_Version_Name
	}
	return ""
}

func (x *FirmwareUpdateResp) GetFirmware_Version_Major() uint32 {
	if x != nil {
		return x.Firmware_Version_Major
	}
	return 0
}

func (x *FirmwareUpdateResp) GetFirmware_Version_Minor() uint32 {
	if x != nil {
		return x.Firmware_Version_Minor
	}
	return 0
}

func (x *FirmwareUpdateResp) GetFirmware_Version_Revision() uint32 {
	if x != nil {
		return x.Firmware_Version_Revision
	}
	return 0
}

type FUStartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Firmware ID
	FirmwareID uint32 `protobuf:"varint,1,opt,name=FirmwareID,proto3" json:"FirmwareID,omitempty"`
	// Firmware file total size in bytes
	TotalSize uint32 `protobuf:"varint,2,opt,name=TotalSize,proto3" json:"TotalSize,omitempty"`
}

func (x *FUStartData) Reset() {
	*x = FUStartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FUStartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FUStartData) ProtoMessage() {}

func (x *FUStartData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FUStartData.ProtoReflect.Descriptor instead.
func (*FUStartData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{13}
}

func (x *FUStartData) GetFirmwareID() uint32 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FUStartData) GetTotalSize() uint32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type FUPackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID uint32 `protobuf:"varint,1,opt,name=FirmwareID,proto3" json:"FirmwareID,omitempty"`
	Start      uint32 `protobuf:"varint,2,opt,name=Start,proto3" json:"Start,omitempty"`
	End        uint32 `protobuf:"varint,3,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *FUPackRequest) Reset() {
	*x = FUPackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FUPackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FUPackRequest) ProtoMessage() {}

func (x *FUPackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FUPackRequest.ProtoReflect.Descriptor instead.
func (*FUPackRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{14}
}

func (x *FUPackRequest) GetFirmwareID() uint32 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FUPackRequest) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FUPackRequest) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type FUPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID uint32     `protobuf:"varint,1,opt,name=FirmwareID,proto3" json:"FirmwareID,omitempty"`
	Response   FURespCode `protobuf:"varint,2,opt,name=Response,proto3,enum=Messages.FURespCode" json:"Response,omitempty"`
	Start      uint32     `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	End        uint32     `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
	Data       []byte     `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *FUPacket) Reset() {
	*x = FUPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FUPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FUPacket) ProtoMessage() {}

func (x *FUPacket) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FUPacket.ProtoReflect.Descriptor instead.
func (*FUPacket) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{15}
}

func (x *FUPacket) GetFirmwareID() uint32 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FUPacket) GetResponse() FURespCode {
	if x != nil {
		return x.Response
	}
	return FURespCode_FU_NONE
}

func (x *FUPacket) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *FUPacket) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *FUPacket) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnixTimestamp uint32   `protobuf:"fixed32,1,opt,name=UnixTimestamp,proto3" json:"UnixTimestamp,omitempty"`
	Level         LogLevel `protobuf:"varint,2,opt,name=Level,proto3,enum=Messages.LogLevel" json:"Level,omitempty"`
	Message       string   `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *LogMessage) Reset() {
	*x = LogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogMessage) ProtoMessage() {}

func (x *LogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogMessage.ProtoReflect.Descriptor instead.
func (*LogMessage) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{16}
}

func (x *LogMessage) GetUnixTimestamp() uint32 {
	if x != nil {
		return x.UnixTimestamp
	}
	return 0
}

func (x *LogMessage) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_NONE
}

func (x *LogMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type LogPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*LogMessage `protobuf:"bytes,1,rep,name=Messages,proto3" json:"Messages,omitempty"`
}

func (x *LogPack) Reset() {
	*x = LogPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogPack) ProtoMessage() {}

func (x *LogPack) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogPack.ProtoReflect.Descriptor instead.
func (*LogPack) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{17}
}

func (x *LogPack) GetMessages() []*LogMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

type LogStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level LogLevel `protobuf:"varint,1,opt,name=Level,proto3,enum=Messages.LogLevel" json:"Level,omitempty"`
}

func (x *LogStart) Reset() {
	*x = LogStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogStart) ProtoMessage() {}

func (x *LogStart) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogStart.ProtoReflect.Descriptor instead.
func (*LogStart) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{18}
}

func (x *LogStart) GetLevel() LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLevel_LOG_LEVEL_NONE
}

// FMS -------------------------------------
type FMSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PGN_Id_List    []uint32 `protobuf:"varint,1,rep,packed,name=PGN_Id_List,json=PGNIdList,proto3" json:"PGN_Id_List,omitempty"`
	PGN_Value_List []uint64 `protobuf:"varint,2,rep,packed,name=PGN_Value_List,json=PGNValueList,proto3" json:"PGN_Value_List,omitempty"`
}

func (x *FMSData) Reset() {
	*x = FMSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FMSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FMSData) ProtoMessage() {}

func (x *FMSData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FMSData.ProtoReflect.Descriptor instead.
func (*FMSData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{19}
}

func (x *FMSData) GetPGN_Id_List() []uint32 {
	if x != nil {
		return x.PGN_Id_List
	}
	return nil
}

func (x *FMSData) GetPGN_Value_List() []uint64 {
	if x != nil {
		return x.PGN_Value_List
	}
	return nil
}

// Authenticate -----------------------
type AuthenticateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=Code,proto3" json:"Code,omitempty"`
}

func (x *AuthenticateRequest) Reset() {
	*x = AuthenticateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateRequest) ProtoMessage() {}

func (x *AuthenticateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{20}
}

func (x *AuthenticateRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type AuthenticateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code AuthenticateResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=Messages.AuthenticateResponseCode" json:"Code,omitempty"`
}

func (x *AuthenticateResponse) Reset() {
	*x = AuthenticateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateResponse) ProtoMessage() {}

func (x *AuthenticateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateResponse.ProtoReflect.Descriptor instead.
func (*AuthenticateResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{21}
}

func (x *AuthenticateResponse) GetCode() AuthenticateResponseCode {
	if x != nil {
		return x.Code
	}
	return AuthenticateResponseCode_Authenticate_Invalid
}

// Commands ---------------------------
type CommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (x *CommandRequest) Reset() {
	*x = CommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandRequest) ProtoMessage() {}

func (x *CommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandRequest.ProtoReflect.Descriptor instead.
func (*CommandRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{22}
}

func (x *CommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=Response,proto3" json:"Response,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{23}
}

func (x *CommandResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type USSDData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	USSDCode       string `protobuf:"bytes,2,opt,name=USSDCode,proto3" json:"USSDCode,omitempty"`
	USSDResponse   string `protobuf:"bytes,3,opt,name=USSDResponse,proto3" json:"USSDResponse,omitempty"`
	Timestamp      uint32 `protobuf:"varint,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	ResponseStatus bool   `protobuf:"varint,5,opt,name=ResponseStatus,proto3" json:"ResponseStatus,omitempty"`
}

func (x *USSDData) Reset() {
	*x = USSDData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *USSDData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*USSDData) ProtoMessage() {}

func (x *USSDData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use USSDData.ProtoReflect.Descriptor instead.
func (*USSDData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{24}
}

func (x *USSDData) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *USSDData) GetUSSDCode() string {
	if x != nil {
		return x.USSDCode
	}
	return ""
}

func (x *USSDData) GetUSSDResponse() string {
	if x != nil {
		return x.USSDResponse
	}
	return ""
}

func (x *USSDData) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *USSDData) GetResponseStatus() bool {
	if x != nil {
		return x.ResponseStatus
	}
	return false
}

// Crash
type CrashAccelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	X         int32  `protobuf:"zigzag32,2,opt,name=X,proto3" json:"X,omitempty"`
	Y         int32  `protobuf:"zigzag32,3,opt,name=Y,proto3" json:"Y,omitempty"`
	Z         int32  `protobuf:"zigzag32,4,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (x *CrashAccelData) Reset() {
	*x = CrashAccelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrashAccelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrashAccelData) ProtoMessage() {}

func (x *CrashAccelData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrashAccelData.ProtoReflect.Descriptor instead.
func (*CrashAccelData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{25}
}

func (x *CrashAccelData) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CrashAccelData) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *CrashAccelData) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *CrashAccelData) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type CrashData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp uint32            `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Level     uint32            `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	AccelData []*CrashAccelData `protobuf:"bytes,3,rep,name=AccelData,proto3" json:"AccelData,omitempty"`
	PointData []*DataPoint      `protobuf:"bytes,4,rep,name=PointData,proto3" json:"PointData,omitempty"`
}

func (x *CrashData) Reset() {
	*x = CrashData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrashData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrashData) ProtoMessage() {}

func (x *CrashData) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrashData.ProtoReflect.Descriptor instead.
func (*CrashData) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{26}
}

func (x *CrashData) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CrashData) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *CrashData) GetAccelData() []*CrashAccelData {
	if x != nil {
		return x.AccelData
	}
	return nil
}

func (x *CrashData) GetPointData() []*DataPoint {
	if x != nil {
		return x.PointData
	}
	return nil
}

type CrashDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CrashDataResponseCode `protobuf:"varint,1,opt,name=Code,proto3,enum=Messages.CrashDataResponseCode" json:"Code,omitempty"`
}

func (x *CrashDataResponse) Reset() {
	*x = CrashDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrashDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrashDataResponse) ProtoMessage() {}

func (x *CrashDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrashDataResponse.ProtoReflect.Descriptor instead.
func (*CrashDataResponse) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{27}
}

func (x *CrashDataResponse) GetCode() CrashDataResponseCode {
	if x != nil {
		return x.Code
	}
	return CrashDataResponseCode_CrashData_Error
}

type DTCResposne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DTCResposneCode DTCResposneCode `protobuf:"varint,1,opt,name=DTCResposneCode,proto3,enum=Messages.DTCResposneCode" json:"DTCResposneCode,omitempty"`
}

func (x *DTCResposne) Reset() {
	*x = DTCResposne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTCResposne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTCResposne) ProtoMessage() {}

func (x *DTCResposne) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTCResposne.ProtoReflect.Descriptor instead.
func (*DTCResposne) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{28}
}

func (x *DTCResposne) GetDTCResposneCode() DTCResposneCode {
	if x != nil {
		return x.DTCResposneCode
	}
	return DTCResposneCode_DTC_RESPOSNE_NONE
}

type DTCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DTCRecords []*DTCRecord `protobuf:"bytes,1,rep,name=DTCRecords,proto3" json:"DTCRecords,omitempty"`
}

func (x *DTCRequest) Reset() {
	*x = DTCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTCRequest) ProtoMessage() {}

func (x *DTCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTCRequest.ProtoReflect.Descriptor instead.
func (*DTCRequest) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{29}
}

func (x *DTCRequest) GetDTCRecords() []*DTCRecord {
	if x != nil {
		return x.DTCRecords
	}
	return nil
}

type DTCRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DTCCodes  []*DTCCode `protobuf:"bytes,1,rep,name=DTCCodes,proto3" json:"DTCCodes,omitempty"`
	Timestamp uint32     `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	// OBD Lamp status
	OBD_MalfunctionIndicatorLamp bool `protobuf:"varint,3,opt,name=OBD_MalfunctionIndicatorLamp,json=OBDMalfunctionIndicatorLamp,proto3" json:"OBD_MalfunctionIndicatorLamp,omitempty"`
	// FMS Lamp Status
	FMS_ProtectLamp              uint32 `protobuf:"varint,4,opt,name=FMS_ProtectLamp,json=FMSProtectLamp,proto3" json:"FMS_ProtectLamp,omitempty"`
	FMS_AmberWarningLamp         uint32 `protobuf:"varint,5,opt,name=FMS_AmberWarningLamp,json=FMSAmberWarningLamp,proto3" json:"FMS_AmberWarningLamp,omitempty"`
	FMS_RedStopLamp              uint32 `protobuf:"varint,6,opt,name=FMS_RedStopLamp,json=FMSRedStopLamp,proto3" json:"FMS_RedStopLamp,omitempty"`
	FMS_MalfunctionIndicatorLamp uint32 `protobuf:"varint,7,opt,name=FMS_MalfunctionIndicatorLamp,json=FMSMalfunctionIndicatorLamp,proto3" json:"FMS_MalfunctionIndicatorLamp,omitempty"`
	FMS_SAELamp1                 uint32 `protobuf:"varint,8,opt,name=FMS_SAELamp1,json=FMSSAELamp1,proto3" json:"FMS_SAELamp1,omitempty"`
	FMS_SAELamp2                 uint32 `protobuf:"varint,9,opt,name=FMS_SAELamp2,json=FMSSAELamp2,proto3" json:"FMS_SAELamp2,omitempty"`
	FMS_SAELamp3                 uint32 `protobuf:"varint,10,opt,name=FMS_SAELamp3,json=FMSSAELamp3,proto3" json:"FMS_SAELamp3,omitempty"`
	FMS_SAELamp4                 uint32 `protobuf:"varint,11,opt,name=FMS_SAELamp4,json=FMSSAELamp4,proto3" json:"FMS_SAELamp4,omitempty"`
}

func (x *DTCRecord) Reset() {
	*x = DTCRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTCRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTCRecord) ProtoMessage() {}

func (x *DTCRecord) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTCRecord.ProtoReflect.Descriptor instead.
func (*DTCRecord) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{30}
}

func (x *DTCRecord) GetDTCCodes() []*DTCCode {
	if x != nil {
		return x.DTCCodes
	}
	return nil
}

func (x *DTCRecord) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DTCRecord) GetOBD_MalfunctionIndicatorLamp() bool {
	if x != nil {
		return x.OBD_MalfunctionIndicatorLamp
	}
	return false
}

func (x *DTCRecord) GetFMS_ProtectLamp() uint32 {
	if x != nil {
		return x.FMS_ProtectLamp
	}
	return 0
}

func (x *DTCRecord) GetFMS_AmberWarningLamp() uint32 {
	if x != nil {
		return x.FMS_AmberWarningLamp
	}
	return 0
}

func (x *DTCRecord) GetFMS_RedStopLamp() uint32 {
	if x != nil {
		return x.FMS_RedStopLamp
	}
	return 0
}

func (x *DTCRecord) GetFMS_MalfunctionIndicatorLamp() uint32 {
	if x != nil {
		return x.FMS_MalfunctionIndicatorLamp
	}
	return 0
}

func (x *DTCRecord) GetFMS_SAELamp1() uint32 {
	if x != nil {
		return x.FMS_SAELamp1
	}
	return 0
}

func (x *DTCRecord) GetFMS_SAELamp2() uint32 {
	if x != nil {
		return x.FMS_SAELamp2
	}
	return 0
}

func (x *DTCRecord) GetFMS_SAELamp3() uint32 {
	if x != nil {
		return x.FMS_SAELamp3
	}
	return 0
}

func (x *DTCRecord) GetFMS_SAELamp4() uint32 {
	if x != nil {
		return x.FMS_SAELamp4
	}
	return 0
}

type DTCCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DTCType         DTCType `protobuf:"varint,1,opt,name=DTCType,proto3,enum=Messages.DTCType" json:"DTCType,omitempty"`
	Code            uint32  `protobuf:"varint,2,opt,name=Code,proto3" json:"Code,omitempty"`
	Reason          uint32  `protobuf:"varint,3,opt,name=Reason,proto3" json:"Reason,omitempty"`
	OccurrenceCount uint32  `protobuf:"varint,4,opt,name=OccurrenceCount,proto3" json:"OccurrenceCount,omitempty"`
	Source          uint32  `protobuf:"varint,5,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *DTCCode) Reset() {
	*x = DTCCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTCCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTCCode) ProtoMessage() {}

func (x *DTCCode) ProtoReflect() protoreflect.Message {
	mi := &file_Messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTCCode.ProtoReflect.Descriptor instead.
func (*DTCCode) Descriptor() ([]byte, []int) {
	return file_Messages_proto_rawDescGZIP(), []int{31}
}

func (x *DTCCode) GetDTCType() DTCType {
	if x != nil {
		return x.DTCType
	}
	return DTCType_OBD_STORED_DTC
}

func (x *DTCCode) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DTCCode) GetReason() uint32 {
	if x != nil {
		return x.Reason
	}
	return 0
}

func (x *DTCCode) GetOccurrenceCount() uint32 {
	if x != nil {
		return x.OccurrenceCount
	}
	return 0
}

func (x *DTCCode) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

var File_Messages_proto protoreflect.FileDescriptor

var file_Messages_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x0c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x06, 0x49, 0x4f, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdf, 0x02, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x48, 0x44, 0x4f, 0x50, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x48,
	0x44, 0x4f, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x27, 0x0a, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x49, 0x4f,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x49, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x49, 0x4f,
	0x4c, 0x69, 0x73, 0x74, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0b, 0x49, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3e, 0x0a,
	0x0f, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x13,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x4d, 0x45, 0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x04,
	0x49, 0x4d, 0x45, 0x49, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x54, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0c, 0x52, 0x54, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52, 0x12,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x47, 0x4e, 0x53, 0x53, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47, 0x4e, 0x53,
	0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x47, 0x4e, 0x53, 0x53, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x46, 0x69, 0x78, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x47, 0x4e, 0x53, 0x53, 0x46, 0x69, 0x78, 0x12, 0x2f,
	0x0a, 0x13, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x46, 0x69, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x4e, 0x53,
	0x53, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x46, 0x69, 0x72, 0x73, 0x74, 0x46, 0x69, 0x78, 0x12,
	0x2d, 0x0a, 0x12, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x61,
	0x73, 0x74, 0x46, 0x69, 0x78, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x47, 0x4e, 0x53,
	0x53, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x78, 0x12, 0x21,
	0x0a, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x4c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x47, 0x4e, 0x53, 0x53, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x47, 0x4e, 0x53, 0x53, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x42, 0x65, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x4e, 0x53, 0x53, 0x42, 0x65, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x48, 0x44, 0x4f,
	0x50, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x47, 0x4e, 0x53, 0x53, 0x48, 0x44, 0x4f,
	0x50, 0x12, 0x1b, 0x0a, 0x09, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x50, 0x44, 0x4f, 0x50, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x47, 0x4e, 0x53, 0x53, 0x50, 0x44, 0x4f, 0x50, 0x12, 0x25,
	0x0a, 0x0e, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x53, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x47, 0x4e, 0x53, 0x53, 0x53, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x47, 0x50,
	0x53, 0x53, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x47, 0x4e, 0x53,
	0x53, 0x47, 0x50, 0x53, 0x53, 0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x47, 0x4e, 0x53, 0x53,
	0x5f, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x53, 0x61, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x47, 0x4e, 0x53, 0x53, 0x47, 0x4c, 0x4f, 0x4e, 0x41, 0x53, 0x53, 0x53,
	0x61, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x47, 0x61, 0x6c, 0x69,
	0x6c, 0x65, 0x6f, 0x53, 0x61, 0x74, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x47,
	0x4e, 0x53, 0x53, 0x47, 0x61, 0x6c, 0x69, 0x6c, 0x65, 0x6f, 0x53, 0x61, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x42, 0x65, 0x69, 0x64, 0x6f, 0x75, 0x53, 0x61, 0x74,
	0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x47, 0x4e, 0x53, 0x53, 0x42, 0x65, 0x69,
	0x64, 0x6f, 0x75, 0x53, 0x61, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x4e, 0x53, 0x53, 0x5f,
	0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x47,
	0x4e, 0x53, 0x53, 0x5f, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x11, 0x47, 0x4e, 0x53, 0x53, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x53, 0x4d, 0x5f, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x47, 0x53, 0x4d, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0d, 0x47, 0x53, 0x4d, 0x5f, 0x53, 0x49, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x49, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0c, 0x47, 0x53, 0x4d, 0x53, 0x49, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x47, 0x53, 0x4d, 0x5f, 0x47, 0x50, 0x52, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x47, 0x53, 0x4d, 0x47, 0x50, 0x52, 0x53, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x47, 0x53, 0x4d, 0x5f, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x47, 0x53, 0x4d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x47, 0x53, 0x4d, 0x5f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x47, 0x53, 0x4d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x47,
	0x53, 0x4d, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x47, 0x53, 0x4d, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x47, 0x53, 0x4d, 0x5f, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x47, 0x53, 0x4d, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x12, 0x47, 0x53, 0x4d, 0x5f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x47, 0x53, 0x4d, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x47, 0x53, 0x4d, 0x5f, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x47, 0x53, 0x4d, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a,
	0x15, 0x47, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x53, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x47, 0x53,
	0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x53, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x18, 0x47, 0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x16, 0x47, 0x53, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x22, 0x47,
	0x53, 0x4d, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x47, 0x53, 0x4d, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x47, 0x53, 0x4d,
	0x5f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x5f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x47, 0x53, 0x4d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x47, 0x53, 0x4d, 0x5f, 0x47, 0x50, 0x52,
	0x53, 0x5f, 0x53, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x47, 0x53, 0x4d, 0x47, 0x50, 0x52, 0x53, 0x53, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x32, 0x0a, 0x15, 0x47, 0x53, 0x4d, 0x5f, 0x47, 0x50, 0x52, 0x53, 0x5f, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x47, 0x53, 0x4d, 0x47, 0x50, 0x52, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0c, 0x47, 0x53, 0x4d, 0x5f, 0x53, 0x4d, 0x53,
	0x5f, 0x53, 0x65, 0x6e, 0x74, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x47, 0x53, 0x4d,
	0x53, 0x4d, 0x53, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x47, 0x53, 0x4d, 0x5f, 0x53,
	0x4d, 0x53, 0x5f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x47, 0x53, 0x4d, 0x53, 0x4d, 0x53, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x47, 0x53, 0x4d, 0x5f, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x47, 0x53, 0x4d,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x42, 0x6c, 0x75, 0x65,
	0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x4d, 0x41, 0x43, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x4d, 0x41, 0x43, 0x12, 0x48, 0x0a,
	0x20, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x6e, 0x6b, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x53, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f,
	0x6f, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x6e, 0x6b, 0x5f, 0x4d, 0x41, 0x43, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x6e, 0x6b, 0x4d, 0x41, 0x43, 0x12, 0x60, 0x0a, 0x1a, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x5f, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x45, 0x78,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x18, 0x42,
	0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x6c, 0x75, 0x65, 0x74,
	0x6f, 0x6f, 0x74, 0x68, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x17, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x5f, 0x45,
	0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x4d, 0x41, 0x43, 0x18, 0x58, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x45, 0x78, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x12, 0x2e, 0x0a, 0x09, 0x49, 0x4f, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x49, 0x44, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x49, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0c, 0x49, 0x4f, 0x4c,
	0x69, 0x73, 0x74, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x0b, 0x49, 0x4f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x64, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x34, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x4d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x32, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x52, 0x0a, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x66, 0x66, 0x22, 0xac, 0x02, 0x0a, 0x1a, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x48, 0x61, 0x72,
	0x64, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72,
	0x12, 0x36, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x6e, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xc2,
	0x02, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x46, 0x55, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x34, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x0b, 0x46, 0x55, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x57, 0x0a, 0x0d, 0x46, 0x55, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x46, 0x55,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x46, 0x55, 0x52, 0x65, 0x73, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x76, 0x0a, 0x0a, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0d, 0x55, 0x6e, 0x69, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x07,
	0x4c, 0x6f, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x4c, 0x6f, 0x67,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x4f, 0x0a, 0x07, 0x46, 0x4d, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0b, 0x50, 0x47,
	0x4e, 0x5f, 0x49, 0x64, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x09, 0x50, 0x47, 0x4e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x50, 0x47,
	0x4e, 0x5f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0c, 0x50, 0x47, 0x4e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x29, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x2a, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x2d, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x08, 0x55, 0x53, 0x53, 0x44, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x53, 0x53, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x53, 0x53, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x55, 0x53, 0x53, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x55, 0x53, 0x53, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x0e, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x0c, 0x0a, 0x01, 0x58, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x01, 0x58, 0x12, 0x0c, 0x0a, 0x01, 0x59, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x01, 0x59, 0x12, 0x0c, 0x0a, 0x01, 0x5a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x01, 0x5a, 0x22, 0xaa, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a,
	0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x22, 0x48, 0x0a, 0x11, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x43,
	0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x52, 0x0a, 0x0b, 0x44, 0x54,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x44, 0x54, 0x43,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x54,
	0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x44,
	0x54, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x41,
	0x0a, 0x0a, 0x44, 0x54, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a,
	0x44, 0x54, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x54, 0x43, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0a, 0x44, 0x54, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0xef, 0x03, 0x0a, 0x09, 0x44, 0x54, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2d, 0x0a, 0x08, 0x44, 0x54, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x54, 0x43,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x44, 0x54, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x1c,
	0x4f, 0x42, 0x44, 0x5f, 0x4d, 0x61, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x4f, 0x42, 0x44, 0x4d, 0x61, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x6d, 0x70, 0x12,
	0x27, 0x0a, 0x0f, 0x46, 0x4d, 0x53, 0x5f, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x4c, 0x61,
	0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x46, 0x4d, 0x53, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x14, 0x46, 0x4d, 0x53, 0x5f,
	0x41, 0x6d, 0x62, 0x65, 0x72, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6d, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x46, 0x4d, 0x53, 0x41, 0x6d, 0x62, 0x65, 0x72,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x46,
	0x4d, 0x53, 0x5f, 0x52, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x61, 0x6d, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x46, 0x4d, 0x53, 0x52, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x70,
	0x4c, 0x61, 0x6d, 0x70, 0x12, 0x41, 0x0a, 0x1c, 0x46, 0x4d, 0x53, 0x5f, 0x4d, 0x61, 0x6c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x4c, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x46, 0x4d, 0x53, 0x4d,
	0x61, 0x6c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x4c, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x46, 0x4d, 0x53, 0x5f, 0x53,
	0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46,
	0x4d, 0x53, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x46, 0x4d,
	0x53, 0x5f, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x46, 0x4d, 0x53, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x32, 0x12, 0x21, 0x0a,
	0x0c, 0x46, 0x4d, 0x53, 0x5f, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x33, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x4d, 0x53, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x33,
	0x12, 0x21, 0x0a, 0x0c, 0x46, 0x4d, 0x53, 0x5f, 0x53, 0x41, 0x45, 0x4c, 0x61, 0x6d, 0x70, 0x34,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x46, 0x4d, 0x53, 0x53, 0x41, 0x45, 0x4c, 0x61,
	0x6d, 0x70, 0x34, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x44, 0x54, 0x43, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x44, 0x54, 0x43, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x44, 0x54, 0x43, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x44, 0x54, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x4f, 0x63, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a, 0xb8, 0x0a, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x07,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x08, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x53, 0x65, 0x74, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x47, 0x65, 0x74, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x47, 0x65, 0x74,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x44, 0x69, 0x66, 0x66, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x44,
	0x69, 0x66, 0x66, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0f, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x53, 0x53, 0x4c, 0x53, 0x65, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x10, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x53,
	0x53, 0x4c, 0x53, 0x65, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x53, 0x53, 0x4c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x53, 0x53, 0x4c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x13, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x16, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x17, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x10, 0x1e, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x5f, 0x45,
	0x6e, 0x64, 0x10, 0x21, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x5f, 0x50, 0x61, 0x63, 0x6b,
	0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x28, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x29, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x2a, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x69, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x10, 0x2b, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x3c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x3d, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x53, 0x53, 0x44, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x10, 0x44, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x46, 0x12,
	0x1a, 0x0a, 0x16, 0x45, 0x78, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x44, 0x61, 0x74, 0x61,
	0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x47, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x78, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x61, 0x6c, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x48, 0x12, 0x20, 0x0a, 0x1c,
	0x45, 0x78, 0x70, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x53, 0x65, 0x74, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x49, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x4d, 0x53, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x10, 0x50, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4d, 0x53, 0x5f, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x6f, 0x67, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x51, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4d,
	0x53, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x10, 0x52,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x5a, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x72, 0x61, 0x73,
	0x68, 0x5f, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x5b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x49, 0x50, 0x41, 0x41, 0x44, 0x5f, 0x53, 0x53, 0x4c, 0x5f,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x64, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x49, 0x50, 0x41, 0x41, 0x44, 0x5f, 0x53, 0x53,
	0x4c, 0x5f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x65, 0x12, 0x2d, 0x0a, 0x29, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x6e, 0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x54, 0x72, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x6f, 0x2a, 0x32, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x4e, 0x6f,
	0x6e, 0x65, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x67, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x01, 0x2a, 0x73, 0x0a, 0x14, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x5f, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x50,
	0x61, 0x63, 0x6b, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61,
	0x50, 0x61, 0x63, 0x6b, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x63, 0x6b, 0x5f,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x2a, 0x4d,
	0x0a, 0x0a, 0x47, 0x4e, 0x53, 0x53, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4f, 0x66, 0x66, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4e,
	0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x10, 0x03, 0x2a, 0x7a, 0x0a,
	0x12, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4e, 0x6f, 0x4a, 0x61, 0x6d,
	0x6d, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4a,
	0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x47, 0x4e, 0x53, 0x53, 0x5f, 0x4a, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x10, 0x03, 0x2a, 0x91, 0x01, 0x0a, 0x0b, 0x4d, 0x6f,
	0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x64,
	0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4f, 0x66, 0x66, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x4e, 0x6f,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x6f, 0x64, 0x65,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x6f, 0x64, 0x65, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x52, 0x6f, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0xd2, 0x01,
	0x0a, 0x09, 0x53, 0x49, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x49, 0x4d, 0x5f, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x4d, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x55, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x48, 0x5f, 0x50, 0x49, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x48, 0x5f,
	0x50, 0x55, 0x4b, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x49, 0x4d,
	0x5f, 0x50, 0x49, 0x4e, 0x32, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x49, 0x4d, 0x5f, 0x50, 0x55, 0x4b, 0x32, 0x5f, 0x52, 0x45, 0x51, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x49, 0x4d, 0x5f, 0x42, 0x75, 0x73, 0x79, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x49, 0x4d, 0x5f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x09, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x49, 0x4d, 0x5f, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x0a, 0x2a, 0x40, 0x0a, 0x0f, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4c, 0x5f, 0x4f, 0x66, 0x66, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x5f, 0x4f, 0x6e, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x5f, 0x4f, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x10, 0x02, 0x2a, 0x93, 0x01, 0x0a, 0x18, 0x42, 0x6c, 0x75, 0x65, 0x74, 0x6f, 0x6f,
	0x74, 0x68, 0x45, 0x78, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x45, 0x78, 0x74, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4c, 0x45, 0x78, 0x74, 0x5f, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4c, 0x45, 0x78, 0x74, 0x5f, 0x50,
	0x61, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4c, 0x45, 0x78,
	0x74, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x69, 0x72, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x42, 0x4c, 0x45, 0x78, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x45, 0x78, 0x74, 0x5f, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x05, 0x2a, 0x68, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03,
	0x12, 0x12, 0x0a, 0x0e, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x10, 0x04, 0x2a, 0xb0, 0x02, 0x0a, 0x0a, 0x46, 0x55, 0x52, 0x65, 0x73, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x55, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x55, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x5f, 0x47, 0x45, 0x54, 0x50, 0x41, 0x43,
	0x4b, 0x5f, 0x4f, 0x4b, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x55, 0x5f, 0x47, 0x45, 0x54,
	0x50, 0x41, 0x43, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a,
	0x46, 0x55, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x55, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x55,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x55, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x55, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x43, 0x52, 0x43, 0x10, 0x0a, 0x2a, 0x85, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x47, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x57, 0x41, 0x52, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f,
	0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x10, 0x2a,
	0xac, 0x01, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x53, 0x6c, 0x65, 0x65,
	0x70, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x5f, 0x48, 0x61, 0x72, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x6f, 0x67, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x10, 0x05, 0x2a, 0x4c,
	0x0a, 0x18, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x75,
	0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x01, 0x2a, 0x3e, 0x0a, 0x15,
	0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x72, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x72,
	0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x2a, 0x55, 0x0a, 0x0f,
	0x44, 0x54, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x73, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x54, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x53, 0x4e, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x54, 0x43, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x53, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x44, 0x54, 0x43, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x53, 0x4e, 0x45, 0x5f, 0x4f,
	0x4b, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x07, 0x44, 0x54, 0x43, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x0e, 0x4f, 0x42, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x54, 0x43,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x44, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x54, 0x43, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x42, 0x44, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x41, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x54, 0x43, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x4d, 0x53, 0x5f, 0x44, 0x54, 0x43, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x43, 0x41, 0x4e, 0x49, 0x41, 0x5f, 0x44, 0x54, 0x43, 0x10, 0x04, 0x42, 0x2b, 0x5a, 0x29, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x46, 0x61, 0x74, 0x65, 0x68, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x64, 0x6f, 0x6c, 0x70, 0x68,
	0x69, 0x6e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Messages_proto_rawDescOnce sync.Once
	file_Messages_proto_rawDescData = file_Messages_proto_rawDesc
)

func file_Messages_proto_rawDescGZIP() []byte {
	file_Messages_proto_rawDescOnce.Do(func() {
		file_Messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_Messages_proto_rawDescData)
	})
	return file_Messages_proto_rawDescData
}

var file_Messages_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_Messages_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_Messages_proto_goTypes = []any{
	(MessageType)(0),                    // 0: Messages.MessageType
	(MessageFlags)(0),                   // 1: Messages.MessageFlags
	(DataPackResponseCode)(0),           // 2: Messages.DataPackResponseCode
	(GNSSStatus)(0),                     // 3: Messages.GNSSStatus
	(GNSS_JammingStatus)(0),             // 4: Messages.GNSS_JammingStatus
	(ModemStatus)(0),                    // 5: Messages.ModemStatus
	(SIMStatus)(0),                      // 6: Messages.SIMStatus
	(BluetoothStatus)(0),                // 7: Messages.BluetoothStatus
	(BluetoothExtDeviceStatus)(0),       // 8: Messages.BluetoothExtDeviceStatus
	(ConfigResponseCode)(0),             // 9: Messages.ConfigResponseCode
	(FURespCode)(0),                     // 10: Messages.FURespCode
	(LogLevel)(0),                       // 11: Messages.LogLevel
	(SystemResetType)(0),                // 12: Messages.SystemResetType
	(AuthenticateResponseCode)(0),       // 13: Messages.AuthenticateResponseCode
	(CrashDataResponseCode)(0),          // 14: Messages.CrashDataResponseCode
	(DTCResposneCode)(0),                // 15: Messages.DTCResposneCode
	(DTCType)(0),                        // 16: Messages.DTCType
	(*IOData)(nil),                      // 17: Messages.IOData
	(*DataPoint)(nil),                   // 18: Messages.DataPoint
	(*DataPackRequest)(nil),             // 19: Messages.DataPackRequest
	(*DataPackResponse)(nil),            // 20: Messages.DataPackResponse
	(*DeviceInfo)(nil),                  // 21: Messages.DeviceInfo
	(*ConfigSetRequest)(nil),            // 22: Messages.ConfigSetRequest
	(*ConfigSetResponse)(nil),           // 23: Messages.ConfigSetResponse
	(*ConfigGetRequest)(nil),            // 24: Messages.ConfigGetRequest
	(*ConfigGetResponse)(nil),           // 25: Messages.ConfigGetResponse
	(*ConfigDiffRequest)(nil),           // 26: Messages.ConfigDiffRequest
	(*FirmwareUpdateInfo_Request)(nil),  // 27: Messages.FirmwareUpdateInfo_Request
	(*FirmwareUpdateInfo_Response)(nil), // 28: Messages.FirmwareUpdateInfo_Response
	(*FirmwareUpdateResp)(nil),          // 29: Messages.FirmwareUpdateResp
	(*FUStartData)(nil),                 // 30: Messages.FUStartData
	(*FUPackRequest)(nil),               // 31: Messages.FUPackRequest
	(*FUPacket)(nil),                    // 32: Messages.FUPacket
	(*LogMessage)(nil),                  // 33: Messages.LogMessage
	(*LogPack)(nil),                     // 34: Messages.LogPack
	(*LogStart)(nil),                    // 35: Messages.LogStart
	(*FMSData)(nil),                     // 36: Messages.FMSData
	(*AuthenticateRequest)(nil),         // 37: Messages.AuthenticateRequest
	(*AuthenticateResponse)(nil),        // 38: Messages.AuthenticateResponse
	(*CommandRequest)(nil),              // 39: Messages.CommandRequest
	(*CommandResponse)(nil),             // 40: Messages.CommandResponse
	(*USSDData)(nil),                    // 41: Messages.USSDData
	(*CrashAccelData)(nil),              // 42: Messages.CrashAccelData
	(*CrashData)(nil),                   // 43: Messages.CrashData
	(*CrashDataResponse)(nil),           // 44: Messages.CrashDataResponse
	(*DTCResposne)(nil),                 // 45: Messages.DTCResposne
	(*DTCRequest)(nil),                  // 46: Messages.DTCRequest
	(*DTCRecord)(nil),                   // 47: Messages.DTCRecord
	(*DTCCode)(nil),                     // 48: Messages.DTCCode
	(AlarmType)(0),                      // 49: Config.AlarmType
	(*Config)(nil),                      // 50: Config.Config
	(*ConfigDiff)(nil),                  // 51: Config.ConfigDiff
}
var file_Messages_proto_depIdxs = []int32{
	49, // 0: Messages.IOData.ID:type_name -> Config.AlarmType
	49, // 1: Messages.DataPoint.Alarm:type_name -> Config.AlarmType
	49, // 2: Messages.DataPoint.IOList_ID:type_name -> Config.AlarmType
	18, // 3: Messages.DataPackRequest.Points:type_name -> Messages.DataPoint
	2,  // 4: Messages.DataPackResponse.Response:type_name -> Messages.DataPackResponseCode
	3,  // 5: Messages.DeviceInfo.GNSS_Status:type_name -> Messages.GNSSStatus
	4,  // 6: Messages.DeviceInfo.GNSS_JammingStatus:type_name -> Messages.GNSS_JammingStatus
	5,  // 7: Messages.DeviceInfo.GSM_ModemStatus:type_name -> Messages.ModemStatus
	6,  // 8: Messages.DeviceInfo.GSM_SIMStatus:type_name -> Messages.SIMStatus
	7,  // 9: Messages.DeviceInfo.Bluetooth_Status:type_name -> Messages.BluetoothStatus
	8,  // 10: Messages.DeviceInfo.Bluetooth_ExtDevice_Status:type_name -> Messages.BluetoothExtDeviceStatus
	49, // 11: Messages.DeviceInfo.IOList_ID:type_name -> Config.AlarmType
	50, // 12: Messages.ConfigSetRequest.Configuration:type_name -> Config.Config
	9,  // 13: Messages.ConfigSetResponse.Response:type_name -> Messages.ConfigResponseCode
	9,  // 14: Messages.ConfigGetResponse.Response:type_name -> Messages.ConfigResponseCode
	50, // 15: Messages.ConfigGetResponse.Data:type_name -> Config.Config
	51, // 16: Messages.ConfigDiffRequest.ConfigDiff:type_name -> Config.ConfigDiff
	10, // 17: Messages.FirmwareUpdateResp.Response:type_name -> Messages.FURespCode
	10, // 18: Messages.FUPacket.Response:type_name -> Messages.FURespCode
	11, // 19: Messages.LogMessage.Level:type_name -> Messages.LogLevel
	33, // 20: Messages.LogPack.Messages:type_name -> Messages.LogMessage
	11, // 21: Messages.LogStart.Level:type_name -> Messages.LogLevel
	13, // 22: Messages.AuthenticateResponse.Code:type_name -> Messages.AuthenticateResponseCode
	42, // 23: Messages.CrashData.AccelData:type_name -> Messages.CrashAccelData
	18, // 24: Messages.CrashData.PointData:type_name -> Messages.DataPoint
	14, // 25: Messages.CrashDataResponse.Code:type_name -> Messages.CrashDataResponseCode
	15, // 26: Messages.DTCResposne.DTCResposneCode:type_name -> Messages.DTCResposneCode
	47, // 27: Messages.DTCRequest.DTCRecords:type_name -> Messages.DTCRecord
	48, // 28: Messages.DTCRecord.DTCCodes:type_name -> Messages.DTCCode
	16, // 29: Messages.DTCCode.DTCType:type_name -> Messages.DTCType
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_Messages_proto_init() }
func file_Messages_proto_init() {
	if File_Messages_proto != nil {
		return
	}
	file_Config_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_Messages_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*IOData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DataPackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*DataPackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*FirmwareUpdateInfo_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FirmwareUpdateInfo_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FirmwareUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*FUStartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*FUPackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*FUPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*LogPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*LogStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*FMSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*USSDData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CrashAccelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CrashData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*CrashDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DTCResposne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DTCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*DTCRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Messages_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*DTCCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Messages_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Messages_proto_goTypes,
		DependencyIndexes: file_Messages_proto_depIdxs,
		EnumInfos:         file_Messages_proto_enumTypes,
		MessageInfos:      file_Messages_proto_msgTypes,
	}.Build()
	File_Messages_proto = out.File
	file_Messages_proto_rawDesc = nil
	file_Messages_proto_goTypes = nil
	file_Messages_proto_depIdxs = nil
}
